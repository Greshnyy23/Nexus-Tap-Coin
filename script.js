let currency = 0; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
let earningsPerClick = 1; // –°–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞ –æ–¥–∏–Ω –∫–ª–∏–∫
let earningsPerSecond = 0; // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
let totalClicks = 0; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
let totalPlayTime = 0; // –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
let maxCPS = 0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—É
let lastClickTime = Date.now(); // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
let clicksThisSecond = 0; // –ö–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ–∫—É–Ω–¥—É
let lastLogin = localStorage.getItem('lastLogin'); // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
const today = new Date().toDateString(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã

const achievements = {
    100: "–ù–æ–≤–∏—á–æ–∫: 100 –∫–ª–∏–∫–æ–≤!",
    500: "–ü—Ä–æ—Ñ–∏: 500 –∫–ª–∏–∫–æ–≤!",
    1000: "–ú–∞—Å—Ç–µ—Ä: 1000 –∫–ª–∏–∫–æ–≤!"
};

const upgrades = [
    { name: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ +1', price: 10, owned: 0, max: 10, type: 'click', effect: 1 },
    { name: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ +2', price: 30, owned: 0, max: 5, type: 'click', effect: 2 },
    { name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫–µ—Ä', price: 50, owned: 0, max: 5, type: 'passive', effect: 1 }
];

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
    const savedData = JSON.parse(localStorage.getItem('gameData')) || {};
    currency = savedData.currency || 0;
    earningsPerClick = savedData.earningsPerClick || 1;
    upgrades.forEach((upg, i) => {
        upg.owned = savedData.upgrades?.[i]?.owned || 0;
    });
    maxCPS = savedData.maxCPS || 0;
    totalClicks = savedData.totalClicks || 0;
    lastLogin = savedData.lastLogin || null;
    totalPlayTime = savedData.totalPlayTime || 0; // –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ–ª –∏–≥—Ä–æ–∫
    updateUI();
}


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
    localStorage.setItem('gameData', JSON.stringify({
        currency,
        earningsPerClick,
        upgrades: upgrades.map(upgrade => ({ owned: upgrade.owned })),
        maxCPS,
        totalClicks,
        lastLogin,
        totalPlayTime // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    }));
}

// –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function showPage(pageId) {
    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
    document.getElementById(pageId).classList.add('active');
}

// –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –≤–∞–ª—é—Ç—ã
function earnCurrency() {
    currency += earningsPerClick;
    totalClicks++;

    const currentTime = Date.now();
    const timeSinceLastClick = currentTime - lastClickTime;
    
    if (timeSinceLastClick <= 1000) {
        clicksThisSecond++;
    } else {
        clicksThisSecond = 1; // –û–±–Ω—É–ª—è–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ–∫—É–Ω–¥
    }
    lastClickTime = currentTime;

    maxCPS = Math.max(maxCPS, clicksThisSecond); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

    updateUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    showNotification(`+${earningsPerClick} –≤–∞–ª—é—Ç—ã!`); // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    checkAchievements(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function checkAchievements() {
    Object.keys(achievements).forEach(threshold => {
        if (totalClicks >= parseInt(threshold) && !localStorage.getItem(`achievement-${threshold}`)) {
            showNotification(`üèÜ ${achievements[threshold]}`);
            localStorage.setItem(`achievement-${threshold}`, true); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            updateAchievementsUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        }
    });
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.classList.add('show');
    setTimeout(() => notification.classList.remove('show'), 2000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const playTimeSeconds = Math.floor((Date.now() - startTime) / 1000); // –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    const playTimeMinutes = Math.floor(playTimeSeconds / 60);
    const playTimeHours = Math.floor(playTimeMinutes / 60);
    document.getElementById('playTime').textContent = `${playTimeHours}—á ${playTimeMinutes % 60}–º ${playTimeSeconds % 60}—Å`;
    document.getElementById('totalEarned').textContent = currency; 
    document.getElementById('maxCPS').textContent = maxCPS; 
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ª—É—á—à–µ–Ω–∏–π
function updateUpgradesUI() {
    const container = document.getElementById('upgradesList');
    container.innerHTML = upgrades.map((upg, i) => `
        <div class="upgrade">
            <h3>${upg.name}</h3>
            <p>üíµ –¶–µ–Ω–∞: ${upg.price}</p>
            <p>–ö—É–ø–ª–µ–Ω–æ: ${upg.owned}/${upg.max}</p>
            ${upg.effect ? `<p>‚Üë –ó–∞—Ä–∞–±–æ—Ç–æ–∫: +${upg.effect}</p>` : ''}
            <div class="upgrade-progress">
                <div class="progress-bar" style="width: ${(upg.owned / upg.max) * 100}%;"></div>
            </div>
            <button class="upgrade-button" onclick="buyUpgrade(${i})" 
                ${currency < upg.price || upg.owned >= upg.max ? 'disabled' : ''}>–ö—É–ø–∏—Ç—å</button>
        </div>
    `).join('');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            entry.target.classList.toggle('visible', entry.isIntersecting);
        });
    });
    
    document.querySelectorAll('.upgrade').forEach(upgrade => observer.observe(upgrade));
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
function buyUpgrade(index) {
    const upgrade = upgrades[index];
    if (currency >= upgrade.price && upgrade.owned < upgrade.max) {
        currency -= upgrade.price;
        upgrade.owned++;
        
        if (upgrade.type === 'passive') {
            earningsPerSecond += upgrade.effect; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
        } else if (upgrade.type === 'click') {
            earningsPerClick += upgrade.effect; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞ –∫–ª–∏–∫
        }

        updateUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        saveData(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —Å–µ–∫—É–Ω–¥—É
function addEarningsPerSecond() {
    currency += earningsPerSecond; 
    updateUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    saveData(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsUI() {
    const achievementsList = document.getElementById('achievements-list');
    achievementsList.innerHTML = Object.keys(achievements).map(threshold => {
        const completed = localStorage.getItem(`achievement-${threshold}`);
        return `<div class="achievement">${achievements[threshold]} ${completed ? '‚úÖ' : ''}</div>`;
    }).join('');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadData();
updateUI();

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(addEarningsPerSecond, 1000);