class Game {
    constructor() {
        this.$circle = document.querySelector('#circle');
        this.$moneyDisplay = document.getElementById('money');

        this.money = 0;
        this.clickMultiplier = 1;
        this.coinScore = 0; // –°—á–µ—Ç –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ
        this.coinInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–ø–∞–≤–Ω–∞ –º–æ–Ω–µ—Ç
        this.achievements = [];
        this.upgrades = [
            { name: '–î–æ–±–∞–≤–∏—Ç—å 1 –º–æ–Ω–µ—Ç—É –∑–∞ –∫–ª–∏–∫', cost: 50, effect: () => { this.clickMultiplier += 1; } },
            { name: '–£–¥–≤–æ–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∫–ª–∏–∫–∞', cost: 100, effect: () => { this.clickMultiplier *= 2; } },
            { name: '–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –∫–ª–∏–∫', cost: 150, effect: () => { this.clickMultiplier += 1; } },
            { name: '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä (1 –≤ —Å–µ–∫—É–Ω–¥—É)', cost: 200, effect: () => { /* –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä–∞ */ } },
            { name: '–°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∞–≤–Ω–∞ –º–æ–Ω–µ—Ç', cost: 250, effect: () => { /* –õ–æ–≥–∏–∫–∞ —Ç—É—Ç */ } },
            { name: '–£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ø–∞–≤–Ω–∞ –º–æ–Ω–µ—Ç', cost: 300, effect: () => { /* –õ–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å */ } },
            { name: '–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∏–º–∫—É –º–æ–Ω–µ—Ç—ã', cost: 350, effect: () => { this.clickMultiplier += 1; } },
            { name: '–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç', cost: 400, effect: () => { /* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ª–æ–≥–∏–∫—É */ } },
            { name: '–°–ª—É—á–∞–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞', cost: 450, effect: () => { this.money += Math.floor(Math.random() * 100) + 1; } },
            { name: '–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞', cost: 500, effect: () => { this.clickMultiplier += 1; } }
        ];

        this.init();
    }

    init() {
        this.loadGame();
        this.$circle.addEventListener('click', () => this.addMoney(this.clickMultiplier));
        document.getElementById('restartCoinGameButton').addEventListener('click', () => this.restartCoinCollector());
        document.getElementById('resetProgress').addEventListener('click', () => this.openConfirmationModal());
        this.setupTabSwitching();
        this.setupUpgrades(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        document.getElementById('themeButton').addEventListener('click', () => this.toggleTheme());
        this.setupCoinCollector(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É —Å –º–æ–Ω–µ—Ç–∞–º–∏
    }

    loadGame() {
        this.money = Number(localStorage.getItem('money')) || 0;
        this.achievements = JSON.parse(localStorage.getItem('achievements')) || [];
    }

    saveGame() {
        localStorage.setItem('money', this.money);
        localStorage.setItem('achievements', JSON.stringify(this.achievements));
    }

    addMoney(amount) {
        this.money += amount;
        this.$moneyDisplay.textContent = `${this.money} –ó–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤`;
        this.checkForAchievements();
    }

    checkForAchievements() {
        if (this.money >= 100 && !this.achievements.includes("–°–æ–±—Ä–∞–Ω–æ 100 –∑–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤")) {
            this.achievements.push("–°–æ–±—Ä–∞–Ω–æ 100 –∑–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤");
            this.showAchievement("–°–æ–±—Ä–∞–Ω–æ 500 –∑–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤");
        }
        this.saveGame();
    }

    showAchievement(message) {
        const achievementList = document.getElementById('achievementList');
        const achievementItem = document.createElement('div');
        achievementItem.className = 'achievement';
        achievementItem.textContent = message;
        achievementList.appendChild(achievementItem);
    }

    setupTabSwitching() {
        const tabButtons = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabName = button.getAttribute('data-tab');
                tabContents.forEach(tc => tc.classList.remove('active'));
                document.getElementById(tabName).classList.add('active');
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
            });
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã "–ü–æ–π–º–∞–π –º–æ–Ω–µ—Ç—É"
    setupCoinCollector() {
        this.coinScore = 0;
        document.getElementById('coinScore').textContent = `–°—á–µ—Ç: ${this.coinScore}`;
        document.getElementById('coinGameArea').innerHTML = '';
        document.getElementById('restartCoinGameButton').style.display = 'none';
        this.startCoinCollector();
    }

    startCoinCollector() {
        this.createCoin();
        this.coinInterval = setInterval(() => this.createCoin(), 2000);
    }

    createCoin() {
        const coin = document.createElement('div');
        coin.className = 'coin';
        coin.style.top = `${Math.random() * (this.getCoinGameAreaHeight() - 30)}px`;
        coin.style.left = `${Math.random() * (this.getCoinGameAreaWidth() - 30)}px`;

        coin.addEventListener('click', () => {
            this.coinScore++;
            this.addMoney(1);  // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –≤ —Å—á–µ—Ç, —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º 1 –∑–≤–µ–∑–¥—É –∫ –≤–∞–ª—é—Ç–µ
            document.getElementById('coinScore').textContent = `–°—á–µ—Ç: ${this.coinScore}`;
            coin.remove(); // –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        });

        document.getElementById('coinGameArea').appendChild(coin);
    }

    getCoinGameAreaHeight() {
        return document.getElementById('coinGameArea').clientHeight;
    }

    getCoinGameAreaWidth() {
        return document.getElementById('coinGameArea').clientWidth;
    }

    restartCoinCollector() {
        clearInterval(this.coinInterval);  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        this.setupCoinCollector(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    }

    // –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π
    setupUpgrades() {
        const upgradeList = document.getElementById('upgradeList');
        upgradeList.innerHTML = '';  // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

        this.upgrades.forEach((upgrade, index) => {
            const upgradeCard = document.createElement('div');
            upgradeCard.className = 'upgrade-card';
            
            upgradeCard.innerHTML = `
                <div class="upgrade-name">${upgrade.name}</div>
                <div class="upgrade-cost">–¶–µ–Ω–∞: ${upgrade.cost} –ó–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤</div>
                <button class="upgrade-btn" data-index="${index}">–ö—É–ø–∏—Ç—å</button>
            `;

            upgradeCard.querySelector('.upgrade-btn').addEventListener('click', () => this.purchaseUpgrade(index));
            upgradeList.appendChild(upgradeCard);
        });
    }

    purchaseUpgrade(index) {
        const upgrade = this.upgrades[index];
        if (this.money >= upgrade.cost) {
            this.money -= upgrade.cost;
            upgrade.effect();
            this.showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ "${upgrade.name}" –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ!`, 'success'); // –ü–æ–∫–∞–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.updateInterface();
            this.setupUpgrades(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
        } else {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ó–≤—ë–∑–¥–Ω—ã—Ö –æ—á–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è!', 'error'); // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
        }
    }

    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.getElementById('notifications').appendChild(notification);
        setTimeout(() => {
            notification.remove();
        }, 2000);
    }

    toggleTheme() {
        document.body.classList.toggle('light-theme');
        const currentTheme = document.body.classList.contains('light-theme') ? 'üåô' : 'üåû';
        document.getElementById('themeButton').textContent = currentTheme;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', () => {
    const game = new Game();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelector('.close-modal').addEventListener('click', () => game.closeConfirmationModal());
    document.getElementById('cancelReset').addEventListener('click', () => game.closeConfirmationModal());
    document.getElementById('confirmReset').addEventListener('click', () => game.confirmReset());
});
